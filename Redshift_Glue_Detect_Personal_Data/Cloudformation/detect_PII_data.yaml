AWSTemplateFormatVersion: "2010-09-09"


Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Redshift configuration"
        Parameters:
          - RedshiftUser
          - RedshiftPassword
      - Label:
          default: "Network selection"
        Parameters:
          - VPCId
          - SubnetId
          - AvailabilityZone
    ParameterLabels:
      RedshiftUser:
        default: "Provide Redshift master username"
      RedshiftPassword:
        default: "Provide Redshift master password"
      VPCId:
        default: "Provide VPC ID"
      SubnetId:
        default: "Provide subnet ID"
      AvailabilityZone:
        default: "Provide availability zone for selected subnet"

Parameters:

  RedshiftUser:
    Type: String
    Description: The username that is associated with the master user account for the cluster that is being created
    AllowedPattern: "([a-z])([a-z]|[0-9])*"
    MinLength: 1
    MaxLength: 127


  RedshiftPassword:
    Type: String
    Description: Redshift password (must be 8 to 64 characters in length, must contain at least one uppercase letter, one lowercase letter, and one number)
    NoEcho : True
    MinLength: 8
    MaxLength: 64

  VPCId:
    Type: AWS::EC2::VPC::Id

  SubnetId:
    Type: AWS::EC2::Subnet::Id

  AvailabilityZone:
    Type: AWS::EC2::AvailabilityZone::Name

Resources:

  Bucket:
    Type: AWS::S3::Bucket

  RedshiftSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: RedshiftSecret
      SecretString: !Sub "{\"username\":\"${RedshiftUser}\",\"password\":\"${RedshiftPassword}\"}"
      Description: "Secret for Redshift."

  RedshiftSubnetGroup:
      Type: AWS::Redshift::ClusterSubnetGroup
      Properties:
        Description: Redshift SubnetGroup
        SubnetIds:
          - !Ref SubnetId
        Tags:
          - Key: Name
            Value: PII

  RedshiftSG:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Enable Redshift access via port 5439
        VpcId:
          !Ref VPCId
        Tags:
          - Key: Name
            Value: PII

  RedshiftSGInboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref RedshiftSG
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !GetAtt RedshiftSG.GroupId

  RedshiftReadOnlyS3Role:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service: redshift.amazonaws.com
              Action: sts:AssumeRole
        Path: /
        Tags:
          - Key: Name
            Value: PII

  RedshiftRolePolicies:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: S3Policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - "s3:Get*"
                - "s3:List*"
              Resource:
                - !Sub "arn:aws:s3:::${Bucket}"
                - !Sub "arn:aws:s3:::${Bucket}/*"
        Roles:
          - !Ref RedshiftReadOnlyS3Role

  RedshiftCluster:
      Type: AWS::Redshift::Cluster
      Properties:
        DBName: !Ref PIIDatabase
        MasterUsername:  !Sub '{{resolve:secretsmanager:${RedshiftSecret}::username}}'
        MasterUserPassword: !Sub '{{resolve:secretsmanager:${RedshiftSecret}::password}}'
        NodeType: "dc2.large"
        PubliclyAccessible: False
        ClusterType: "multi-node"
        NumberOfNodes: 3
        VpcSecurityGroupIds:
          - !Ref RedshiftSG
        ClusterSubnetGroupName: !Ref RedshiftSubnetGroup
        IamRoles:
          - !GetAtt RedshiftReadOnlyS3Role.Arn
        Tags:
          - Key: Name
            Value: PII

  SecretRedshiftAttachment:
      Type: AWS::SecretsManager::SecretTargetAttachment
      Properties:
        SecretId: !Ref RedshiftSecret
        TargetId: !Ref RedshiftCluster
        TargetType: AWS::Redshift::Cluster

  GlueRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: GluePIIRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "glue.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "GluePermission"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "glue:GetTable"
                  - "glue:GetConnection"
                Resource: [
                  !Sub "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog",
                  !Sub "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/${PIIDatabase}",
                  !Sub "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/*"
                ]

        - PolicyName: "CloudWatch"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: '*'

        - PolicyName: "GlueS3Policy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:*"
                Resource:
                  - !Sub "arn:aws:s3:::${Bucket}"
                  - !Sub "arn:aws:s3:::${Bucket}/*"
        - PolicyName: "GlueConnectionPolicy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "glue:GetConnection"
                Resource:
                  - !Sub "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog"
                  - !Sub "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:connection/redshift_pii_db_connection"
        - PolicyName: "EC2Policy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:DescribeSubnets"
                  - "ec2:DescribeSecurityGroups"
                  - "ec2:CreateTags"
                  - "ec2:DeleteTags"
                  - "ec2:DescribeVpcEndpoints"
                  - "ec2:DescribeRouteTables"
                Resource: "*"
      Tags:
        - Key: Name
          Value: PII

  GlueConnection:
    Type: AWS::Glue::Connection
    DependsOn: RedshiftCluster
    Properties:
      CatalogId: !Ref AWS::AccountId
      ConnectionInput:
        ConnectionType: JDBC
        ConnectionProperties:
          JDBC_CONNECTION_URL: !Sub "jdbc:redshift://${RedshiftCluster.Endpoint.Address}:5439/${PIIDatabase}"
          USERNAME: !Ref RedshiftUser
          PASSWORD: !Ref RedshiftPassword
          JDBC_ENFORCE_SSL: False
        Description: Redshift connection to PII DB
        Name: redshift_pii_db_connection
        PhysicalConnectionRequirements:
          SubnetId: !Ref SubnetId
          SecurityGroupIdList:
            - !Ref RedshiftSG
          AvailabilityZone: !Ref AvailabilityZone

  PIIDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: 'pii_db'
        Description: "DB with PII data"

  GlueCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Sub "crawler_${PIIDatabase}"
      DatabaseName: !Ref PIIDatabase
      Targets:
        JdbcTargets:
          - ConnectionName: !Ref GlueConnection
            Path: !Sub "${PIIDatabase}/public/%"
      Role: !Ref GlueRole
      Tags:
        { "Name": "PII" }

  GlueJob:
    Type: AWS::Glue::Job
    Properties:
      Name: detect-pii-data
      Description: "Detect PII data"
      Command:
        Name: glueetl
        ScriptLocation: !Sub "s3://${Bucket}/glue_script/detect_pii.py"
      DefaultArguments:
        { "--database": !Ref PIIDatabase,
          "--schema_name": "public",
          "--table_name": "personal_health_identifiable_information",
          "--detection_sample_portion" : "1.0",
          "--detection_threshold" : "0.1",
          "--detection_category" : "universal,hippa,networking,united_states,custom",
          "--TempDir" : !Sub "s3://${Bucket}/tmp/",
          "--job-language": "python",

        }
      ExecutionProperty:
        MaxConcurrentRuns: 1
      GlueVersion: 4.0
      MaxRetries: 0
      Role: !GetAtt GlueRole.Arn
      NumberOfWorkers: 5
      WorkerType: G.1X
      Connections:
        Connections:
          - !Ref GlueConnection
      Tags:
        { "Name": "PII" }

  # custom resource to load data into the s3 bucket when this stack is first deployed
  # we use an inlined lambda functions to keep things simple!
  LambdaLoadDataBucketRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref LambdaLoadDataS3Policy

  LambdaLoadDataS3Policy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: S3 and KMS Key Access for the Load Data Lambda
      Path: /
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: "Allow"
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:ListBucket
            Resource:
            - !Sub "arn:aws:s3:::${Bucket}"
            - !Sub "arn:aws:s3:::${Bucket}/*"
            - "arn:aws:s3:::aws-nb-artifacts/*"

  LambdaLoadDataBucket:
    Type: AWS::Lambda::Function
    Properties:
      Description: Custom Resource Lambda that loads the data bucket
      Handler: index.handler
      Runtime: python3.11
      Timeout: 300
      Role: !GetAtt LambdaLoadDataBucketRole.Arn
      Code:
        ZipFile: |
          import os
          import boto3
          import cfnresponse
          import urllib.request
          import time
          def handler(event, context):
            try:
              customer_bucket_name = os.environ.get("CUSTOMER_BUCKET_NAME")

              source_bucket = 'aws-nb-artifacts'
              
              s3 = boto3.resource('s3')
          
              if event['RequestType'] == 'Create':
          
                # copy glue script to customer s3 bucket
                customer_copy_glue_script = {
                    'Bucket': source_bucket,
                    'Key': 'artifacts/BDB-2195/detect_pii.py'
                }
            
                # copy dataset to customer s3 bucket
                customer_copy_dataset = {
                    'Bucket': source_bucket,
                    'Key': 'artifacts/BDB-2195/personal_health_identifiable_information.csv'
                }
  
                bucket = s3.Bucket(customer_bucket_name)
                bucket.copy(customer_copy_glue_script, 'glue_script/detect_pii.py')
                bucket.copy(customer_copy_dataset, 'personal_health_identifiable_information.csv')
             
              if event['RequestType'] == 'Delete':
                # delete glue script from customer s3 bucket
                response = client.delete_object(Bucket=customer_bucket_name, Key='glue_script/detect_pii.py')

                # delete dataset from customer s3 bucket
                response = client.delete_object(Bucket=customer_bucket_name, Key='personal_health_identifiable_information.csv')
                
              # signal
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, context.log_stream_name)
            except Exception as err:
              print("Error in Custom Resource", err)
              # signal
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, context.log_stream_name)
      Environment:
        Variables:
          CUSTOMER_BUCKET_NAME: !Ref Bucket

  LoadDataBucket:
    Type: Custom::LoadDataBucket
    Properties:
      ServiceToken: !GetAtt LambdaLoadDataBucket.Arn

Outputs:

  S3BucketName:
    Description: S3 bucket name
    Value: !Ref Bucket
  RedshiftUser:
    Description: Redshift user
    Value: !Ref RedshiftUser
  RedshiftDB:
    Description: Redshift DB name
    Value: !Ref PIIDatabase
  RedshiftEndpoint:
    Description: Redshift endpoint
    Value: !GetAtt RedshiftCluster.Endpoint.Address
  RedshiftPort:
    Description: Redshift port
    Value: !GetAtt RedshiftCluster.Endpoint.Port
  RedshiftRoleArn:
    Description: Redshift role arn
    Value: !GetAtt RedshiftReadOnlyS3Role.Arn
  GlueConnectionName:
    Description: Glue connection name
    Value: !Ref GlueConnection
  GlueCrawlerName:
    Description: Glue crawler name
    Value: !Ref GlueCrawler
  GlueRoleArn:
    Description: Glue role arn
    Value: !GetAtt GlueRole.Arn
